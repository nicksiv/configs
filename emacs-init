;; -*- mode: Lisp -*-

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(setq inhibit-startup-screen t )
(setq ring-bell-function 'ignore ) ; silent bell on mistakes
(setq-default fill-column 80) ; toggle wrapping text at this column
;(global-linum-mode 1)        ; line numbering
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p); Changes all yes/no questions to y/n type;
(global-visual-line-mode t)
(setq default-input-method "greek") ; Change layout with C-\
(setq calendar-week-start-day 1)
(setq org-startup-folded (quote showall))
(setq default-directory "~/swan/org")

;; Keybindings
(global-set-key [f5] 'bookmark-bmenu-list)
(global-set-key [(control q)] 'kill-this-buffer)

;; Writeroom with spell check and text scale
(global-set-key [f8] (lambda () (interactive) 
(writeroom-mode)(flyspell-mode)(text-scale-set 1)(end-of-buffer)
))

;; Open organizer files
(global-set-key "\C-cm" (lambda () (interactive) 
		       (find-file "~/swan/org/home.org")(beginning-of-buffer)
		       (split-window-right)
		       (find-file "~/swan/org/nicksiv.org")(beginning-of-buffer)

))
(global-set-key "\C-cn" (lambda () (interactive) 
		       (find-file "~/swan/org/nicksiv.org")(beginning-of-buffer)
(delete-other-windows)
))


;; ORG Standard key bindings;
(global-set-key "\C-cl" 'org-store-link);
(global-set-key "\C-ca" 'org-agenda);
(global-set-key "\C-cb" 'org-iswitchb);
(define-key global-map "\C-cc" 'org-capture)


;; Agenda custom
(setq org-agenda-custom-commands
      '(("w" "Worklist priority A#"
         (
	  (todo "TODO")
	  (tags-todo "+PRIORITY=\"A\"")
         ((org-agenda-compact-blocks t))) 

        )))

;; Package setup

;; use-package setup
(require 'package)
(setq package-enable-at-startup nil) ; dont do it immediately

(setq package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa" . "https://melpa.org/packages/"))))
(package-initialize)

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents) ; update archives
  (package-install 'use-package)) ; grab the newest use-package

;; Define packages
(require 'use-package)


;; Always download if not available
(setq use-package-always-ensure t)


(use-package writeroom-mode)

;; easy-hugo
(use-package easy-hugo
:init
(setq easy-hugo-basedir "~/sivridio/")
(setq easy-hugo-postdir "content/posts")
(setq easy-hugo-url "https://sivridis.com")
(setq easy-hugo-root "/home/blog/")
(setq easy-hugo-previewtime "300")
:bind ("C-c C-e" . easy-hugo))

;; ivy
(use-package ivy
  :diminish (ivy-mode . "")
  :init (ivy-mode 1) ; globally at startup
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 20)
  (setq ivy-count-format "%d/%d "))
(provide 'init-ivy)
;;; init-ivy.el ends here.

;; Override the basic Emacs commands
(use-package counsel
  :bind* ; load when pressed
  (("M-x"     . counsel-M-x)
   ("C-s"     . swiper)
   ("C-x C-f" . counsel-find-file)
   ("C-x C-r" . counsel-recentf)  ; search for recently edited
   ("C-c g"   . counsel-git)      ; search for files in git repo
   ("C-c j"   . counsel-git-grep) ; search for regexp in git repo
   ("C-c /"   . counsel-ag)       ; Use ag for regexp
   ("C-x l"   . counsel-locate)
   ("C-x C-f" . counsel-find-file)
   ("<f1> f"  . counsel-describe-function)
   ("<f1> v"  . counsel-describe-variable)
   ("<f1> l"  . counsel-find-library)
   ("<f2> i"  . counsel-info-lookup-symbol)
   ("<f2> u"  . counsel-unicode-char)
   ("C-c C-r" . ivy-resume)))     ; Resume last Ivy-based completion



;; Setup gnus for GMX.com
(setq gnus-select-method '(nnimap "gmx"
(nnimap-address "imap.gmx.com")
(nnimap-server-port 993)
(nnimap-stream ssl)))
(setq message-send-mail-function 'smtpmail-send-it
smtpmail-starttls-credentials '(("mail.gmx.com" 587 nil nil))
smtpmail-auth-credentials '(("mail.gmx.com" 587 "sivridis@gmx.com" nil))
smtpmail-default-smtp-server "mail.gmx.com"
smtpmail-smtp-server "mail.gmx.com"
smtpmail-smtp-service 587
smtpmail-local-domain "yourdomain")
(global-set-key [f9] 'gnus)



	       
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (tango-dark)))
 '(org-agenda-files (quote ("~/swan/org/home.org" "~/swan/org/nicksiv.org")))
 '(org-blank-before-new-entry (quote ((heading) (plain-list-item . auto))))
 '(org-capture-templates
   (quote
    (("t" "Add Personal Task" entry
      (file+headline "~/swan/org/nicksiv.org" "Inbox")
      "* TODO %? 
:PROPERTIES:
:CREATED:  %U
:END:  " :prepend t)
     ("a" "Add Home Task" entry
      (file+headline "~/swan/org/home.org" "Inbox")
      "* TODO %? 
:PROPERTIES:
:CREATED:  %U
:END:  " :prepend t))))
 '(org-hide-leading-stars t)
 '(org-insert-heading-respect-content t)
 '(org-log-into-drawer t)
 '(org-log-state-notes-insert-after-drawers t)
 '(org-refile-targets (quote ((org-agenda-files :maxlevel . 5))))
 '(org-return-follows-link t)
 '(org-reverse-note-order t)
 '(org-todo-keyword-faces
   (quote
    (("TODO" :foreground "pink" :background "dark red" :weight bold)
     ("APPT" :foreground "dark pink" :weight bold)
     ("STRT" :foreground "dark orange" :weight bold)
     ("WAIT" :foreground "red" :weight bold)
     ("NOTE" :foreground "white" :background "dark gray" :weight bold)
     ("DLGD" :foreground "dark violet" :weight bold)
     ("DFRD" :foreground "dark blue" :weight bold)
     ("SMDY" :foreground "dark gray" :background "dark blue" :weight bold)
     ("PROJ" :foreground "#088e8e" :background "dark blue" :weight bold))))
 '(org-todo-repeat-to-state "TODO")
 '(package-selected-packages (quote (easy-hugo counsel use-package ivy writeroom-mode))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-level-1 ((t (:inherit outline-1 :weight bold)))))
